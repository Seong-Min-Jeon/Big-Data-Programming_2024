movies = LOAD '/user/maria_dev/ml-latest/movies.csv'
    USING org.apache.pig.piggybank.storage.CSVExcelStorage(',','NO_MULTILINE',
    'NOCHANGE', 'SKIP_INPUT_HEADER')
    AS (movieId:int, title:chararray, genres:chararray);
ratings_with_header = LOAD '/user/maria_dev/ml-latest/ratings.csv'
    USING PigStorage(',')
    AS (userId:int, movieId:int, rating:float, timestamp:chararray);

ratings = FILTER ratings_with_header BY $0 is not null;
grouped = GROUP ratings BY movieId;
rating_cnt = FOREACH grouped GENERATE FLATTEN(group)
   AS (movieId), COUNT(ratings.rating) as cnt;
filtered_movies = FILTER rating_cnt BY cnt >= 30;
movie_list = FOREACH filtered_movies GENERATE movieId AS (movieId);

movies = JOIN movies BY movieId, movie_list BY movieId;
movies = FOREACH movies GENERATE movies::movieId AS (movieId), 
    movies::genres AS (genres);
ratings = JOIN ratings By movieId, movie_list BY movieId;
ratings = FOREACH ratings GENERATE ratings::movieId AS (movieId), 
    ratings::rating AS (rating);

movies_split = FOREACH movies GENERATE movieId, 
    FLATTEN(TOKENIZE(genres, '\\|')) AS genre;
movie_grouped = GROUP ratings BY movieId;
movie_rating = FOREACH movie_grouped GENERATE FLATTEN(group) AS (movieId),
    COUNT(ratings.rating) as cnt, 
    SUM(ratings.rating) AS rating_sum;
joined = JOIN movies_split BY (movieId), movie_rating BY (movieId);
genre_rating = FOREACH joined GENERATE movies_split::genre AS (genre),
    movie_rating::cnt AS (count),
    movie_rating::rating_sum AS (rating_sum);
genre_grouped = GROUP genre_rating BY genre;
result = FOREACH genre_grouped GENERATE FLATTEN(group) AS (genre),
    SUM(genre_rating.count) AS count,
    SUM(genre_rating.rating_sum)/SUM(genre_rating.count) AS average;
sorted_result = ORDER result BY count DESC;

DUMP sorted_result;
STORE sorted_result INTO '/user/maria_dev/60191684/best_genre'
    USING org.apache.pig.piggybank.storage.CSVExcelStorage(',', 'NO_MULTILINE', 
    'NOCHANGE','WRITE_OUTPUT_HEADER');
